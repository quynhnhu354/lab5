const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');

// Ki·ªÉm tra v√† tr√°nh l·ªói OverwriteModelError
const ProductSchema = new mongoose.Schema({
    name: String,
    price: Number,
    imageUrl: String
});
const Product = mongoose.models.Product || mongoose.model('Product', ProductSchema);

// Hi·ªÉn th·ªã gi·ªè h√†ng
router.get('/', async (req, res) => {
    const cart = req.session.cart || []; // L·∫•y gi·ªè h√†ng t·ª´ session
    try {
        // Truy v·∫•n t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã t√™n, gi√° v√† ·∫£nh trong gi·ªè h√†ng
        const productIds = cart.map(item => item._id);
        const products = await Product.find({ '_id': { $in: productIds } });

        // T·∫°o l·∫°i gi·ªè h√†ng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m
        const updatedCart = cart.map(cartItem => {
            const product = products.find(p => p._id.toString() === cartItem._id);
            return {
                ...cartItem,
                name: product ? product.name : 'S·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y',
                price: product ? product.price : 0,
                imageUrl: product ? product.imageUrl : ''
            };
        });

        res.render('cart', { cart: updatedCart, products }); // Render view 'cart' v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß s·∫£n ph·∫©m
    } catch (error) {
        console.error('L·ªói khi truy v·∫•n s·∫£n ph·∫©m:', error);
        res.status(500).send('L·ªói h·ªá th·ªëng');
    }
});

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng (h·ªó tr·ª£ s·ªë l∆∞·ª£ng)
router.post('/add', async (req, res) => {
    console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ form:", req.body); // Debug d·ªØ li·ªáu g·ª≠i l√™n
    const productId = req.body.productId;

    // L·∫•y gi·ªè h√†ng t·ª´ session (ho·∫∑c kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥)
    if (!req.session.cart) {
        req.session.cart = [];
    }

    try {
        const product = await Product.findById(productId); // Truy v·∫•n t·ª´ MongoDB
        if (!product) {
            return res.status(404).send('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng
        const existingItem = req.session.cart.find(item => item._id.toString() === productId);
        if (existingItem) {
            existingItem.quantity += 1; // N·∫øu ƒë√£ c√≥, tƒÉng s·ªë l∆∞·ª£ng
        } else {
            req.session.cart.push({ _id: product._id.toString(), name: product.name, price: product.price, imageUrl: product.imageUrl, quantity: 1 }); // N·∫øu ch∆∞a c√≥, th√™m v√†o gi·ªè h√†ng
        }

        console.log("üõí Gi·ªè h√†ng sau khi th√™m:", req.session.cart);
        res.redirect('/cart');
    } catch (error) {
        console.error('L·ªói khi t√¨m s·∫£n ph·∫©m:', error);
        res.status(500).send('L·ªói server');
    }
});

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
router.post('/update-quantity', (req, res) => {
    const { productId, quantity } = req.body;

    if (req.session.cart) {
        const cartItem = req.session.cart.find(item => item._id === productId);
        if (cartItem) {
            cartItem.quantity = parseInt(quantity, 10); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        }
    }

    console.log("üõí Gi·ªè h√†ng sau khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", req.session.cart);
    res.redirect('/cart');
});

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng (gi·∫£m s·ªë l∆∞·ª£ng ho·∫∑c x√≥a h·∫≥n)
router.post('/remove', (req, res) => {
    const productId = req.body.productId;

    if (req.session.cart) {
        req.session.cart = req.session.cart.map(item => {
            if (item._id === productId) {
                item.quantity -= 1; // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            }
            return item;
        }).filter(item => item.quantity > 0); // X√≥a s·∫£n ph·∫©m n·∫øu s·ªë l∆∞·ª£ng v·ªÅ 0
    }

    console.log("üõí Gi·ªè h√†ng sau khi x√≥a:", req.session.cart);
    res.redirect('/cart');
});

// X√≥a to√†n b·ªô s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
router.post('/clear', (req, res) => {
    req.session.cart = []; // X√≥a to√†n b·ªô gi·ªè h√†ng
    res.redirect('/cart');
});

module.exports = router;
